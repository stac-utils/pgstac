#!/bin/bash
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
cd $SCRIPT_DIR/..
set -e

if [[ "${CI}" ]]; then
    set -x
fi
function usage() {
    echo -n \
        "Usage: $(basename "$0") <--build> <--no-cache> <script>
        script options: format, test, makemigration, stageversion
        "
exit 1
}

[ "$#" -eq 0 ] && usage

ARGS=($@)
CONTAINER_ARGS=()
for ARG in "${ARGS[@]}"
do
    if [[ $ARG == "--no-cache" ]]; then
        BUILD=1
        NOCACHE="--no-cache"
    elif [[ $ARG == "--build" ]]; then
        BUILD=1
    elif [[ $ARG == "--cpfiles" ]]; then
        CPFILES=1
    else
        CONTAINER_ARGS+=($ARG)
    fi
done
if [[ $BUILD == 1 ]]; then
    echo "Building docker images..."
    docker compose down -v --remove-orphans
    docker compose build $NOCACHE
    docker compose up -d pgstac
    sleep 4
fi
PGSTAC_RUNNING=$(docker compose ps pgstac --status running -q)
echo "PGSTAC_RUNNING=$PGSTAC_RUNNING"
if [[ $CPFILES == 1 ]]; then
    echo "Checking if pypgstacworker is running"
    docker ps | grep pypgstacworker && echo "Killing pypgstacworker" && docker kill pypgstacworker || echo "pypgstac worker not running"
    echo "Running pypgstac worker"
    docker compose run -d --rm --name pypgstacworker pypgstac /bin/bash
    echo "Executing ${CONTAINER_ARGS[@]} in pypgstac worker"
    docker compose exec pypgstac "${CONTAINER_ARGS[@]}"
    echo "copying datafiles to host"
    docker cp pypgstacworker:/opt/src $SCRIPT_DIR/..
    echo "killing pypgstac worker"
    docker kill pypgstacworker
else
    echo "Running ${CONTAINER_ARGS[@]} in pypgstacworker"
    docker compose run -T --rm pypgstac "${CONTAINER_ARGS[@]}"
fi
JOBEXITCODE=$?
[[ $PGSTAC_RUNNING == "" ]] && docker compose stop pgstac
exit $JOBEXITCODE
