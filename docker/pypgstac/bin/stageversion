#!/bin/bash
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
cd /src
SQLDIR=$PGSTACDIR/sql

echo "Creating Migrations using user $(id -u):$(id -g)"

# Remove any existing unreleased migrations
find $MIGRATIONSDIR -name "*unreleased*" -exec rm {} \;

# Get Version
if [[ ! -z "$1" ]]; then
    VERSION=$1
    if echo "$VERSION" | grep -E "^[0-9]+[.][0-9]+[.][0-9]+$"; then
        echo "STAGING VERSION: $VERSION"
    else
        echo "Version must be in the format 0.1.2"
        exit 1
    fi
else
    VERSION="unreleased"
fi


OLDVERSION=$(find $MIGRATIONSDIR -name "pgstac.*.sql" | sed -En 's/^.*pgstac\.([0-9]+\.[0-9]+\.[0-9]+)\.sql$/\1/p' | grep -v "$VERSION" | sort -Vr | head -1)



echo "Bumping version from $OLDVERSION to $VERSION"

# Assemble a base migration for the version and put it in the migrations directory.
echo "Setting version in 999_version.sql and assembling base migration for $VERSION"
cd $SQLDIR
echo "SELECT set_version('${VERSION}');" >999_version.sql
cat *.sql >$MIGRATIONSDIR/pgstac.${VERSION}.sql

# copy new version to pgstac.sql
echo "Copying latest base migration to pgstac.sql"
cd $PGSTACDIR
cat migrations/pgstac.${VERSION}.sql > pgstac.sql

# Update the version number in the appropriate places
[[ $VERSION == 'unreleased' ]] && PYVERSION="${OLDVERSION}-dev" || PYVERSION="$VERSION"
echo "Setting pypgstac version to $PYVERSION"
cat <<EOD > $PYPGSTACDIR/python/pypgstac/version.py
"""Version."""
__version__ = "${PYVERSION}"
EOD
sed "s/^version[ ]*=[ ]*.*$/version = \"${PYVERSION}\"/" $PYPGSTACDIR/pyproject.toml >/tmp/pyproject.toml
cat /tmp/pyproject.toml > $PYPGSTACDIR/pyproject.toml

makemigration -f $OLDVERSION -t $VERSION
